# -*- coding: utf-8 -*-

import importlib

class UiFactory(object):
    """Manages the Ui/EventManager instantiation orchestration.

    Expects that there is a 1-1 relation between a UI class and a module (ex.
    henrique.ui.mainwindow -> henrique.ui.Ui_MainWindow). Should work out-of-the box
    with QtDesigner autogenerated classes.

    For every UI class it also expects that there's an EventManager class that knows
    how to handle events triggered by the UI (ex. henrique.ui.mainwindow.MainWindow ->
    henrique.event.MainWindowEventManager)
    """

    def __init__(self, events_module="henrique.event_manager",
            ui_module="henrique.ui"):
        self.events_module = events_module
        self.ui_module = ui_module

        importlib.import_module(self.events_module)

    def make(self, ui):
        # Instantiate the UI class
        ui_modulename = "%s.%s" % (self.ui_module, ui.lower(),)
        ui_classname = "Ui_%s" % (ui,)
        ui_module = importlib.import_module(ui_modulename)

        ui_class = getattr(ui_module, ui_classname)
        ui_instance = ui_class()

        # And the corresponding EventManager class
        event_module = importlib.import_module(self.events_module)
        event_classname = "%sEventManager" % (ui,)
        event_class = getattr(event_module, event_classname)
        event_instance = event_class(ui_instance)

        self.event_instance = event_instance

        return event_instance
